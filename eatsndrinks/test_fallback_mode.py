#!/usr/bin/env python
"""
Test fallback mode khi kh√¥ng c√≥ OpenAI API
"""

import os
import django

# Setup Django environment
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'eatsndrinks.settings')
django.setup()

from chatbot.services import ChatbotService

def test_fallback_mode():
    """Test fallback mode"""
    print("ü§ñ Testing Fallback Mode")
    print("=" * 50)
    
    service = ChatbotService()
    
    # Test c√°c tr∆∞·ªùng h·ª£p kh√°c nhau
    test_cases = [
        {
            'message': 'Xin ch√†o',
            'expected_behavior': 'Ch√†o l·∫°i, kh√¥ng recommend s·∫£n ph·∫©m'
        },
        {
            'message': 'T√¥i mu·ªën t√¨m ƒë·ªì u·ªëng',
            'expected_behavior': 'Recommend s·∫£n ph·∫©m ƒë·ªì u·ªëng'
        },
        {
            'message': 'C√≥ g√¨ r·∫ª kh√¥ng?',
            'expected_behavior': 'Recommend s·∫£n ph·∫©m gi√° th·∫•p'
        },
        {
            'message': 'Trang web n√†y b√°n g√¨?',
            'expected_behavior': 'Gi·ªõi thi·ªáu v·ªÅ trang web'
        },
        {
            'message': 'ƒê·ªÅ xu·∫•t cho t√¥i m√≥n ƒÉn ngon',
            'expected_behavior': 'Recommend s·∫£n ph·∫©m'
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{i}. Testing: '{test_case['message']}'")
        print(f"   Expected: {test_case['expected_behavior']}")
        
        result = service.process_chat(test_case['message'])
        
        print(f"   Response: {result['message']}")
        print(f"   Model: {result['metadata']['model_used']}")
        print(f"   Recommendations: {len(result['recommendations'])} s·∫£n ph·∫©m")
        
        if result['metadata']['model_used'] == 'fallback':
            print("S·ª≠ d·ª•ng fallback mode")
        else:
            print("S·ª≠ d·ª•ng OpenAI")
        
        # Show recommendations if any
        if result['recommendations']:
            print("S·∫£n ph·∫©m ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t:")
            for rec in result['recommendations'][:3]:
                print(f"      - {rec['name']}: {rec['price']}ƒë")
        
        print("-" * 40)

def test_intent_detection():
    """Test intent detection"""
    print("\nüîç Testing Intent Detection")
    print("=" * 50)
    
    service = ChatbotService()
    
    test_messages = [
        'Xin ch√†o',
        'Hello',
        'T√¥i mu·ªën t√¨m ƒë·ªì u·ªëng',
        'C√≥ g√¨ r·∫ª kh√¥ng?',
        'Trang web n√†y b√°n g√¨?',
        'ƒê·ªÅ xu·∫•t cho t√¥i m√≥n ƒÉn'
    ]
    
    for message in test_messages:
        intent = service.analyze_user_intent(message)
        print(f"\nMessage: '{message}'")
        print(f"Intent: {intent['intent']}")
        print(f"Is Greeting: {intent['is_greeting']}")
        print(f"Is Search: {intent['is_search']}")
        print(f"Is Recommendation: {intent['is_recommendation_request']}")

def main():
    """Main function"""
    print("Fallback Mode Testing")
    print("=" * 60)
    
    print("‚ÑπFallback mode ho·∫°t ƒë·ªông khi:")
    print("- Kh√¥ng c√≥ OpenAI API key")
    print("- API key h·∫øt quota")
    print("- Kh√¥ng c√≥ k·∫øt n·ªëi internet")
    print("- OpenAI API b·ªã l·ªói")
    
    # Test intent detection
    test_intent_detection()
    
    # Test fallback mode
    test_fallback_mode()
    
    print("\n" + "=" * 60)
    print("Fallback mode ho·∫°t ƒë·ªông t·ªët!")
    print("\nüí° L∆∞u √Ω:")
    print("- Fallback mode ƒë∆°n gi·∫£n h∆°n nh∆∞ng v·∫´n h·ªØu √≠ch")
    print("- N·∫°p credit OpenAI ƒë·ªÉ c√≥ tr·∫£i nghi·ªám t·ªët h∆°n")
    print("- Chatbot v·∫´n recommend s·∫£n ph·∫©m ch√≠nh x√°c")

if __name__ == "__main__":
    main() 
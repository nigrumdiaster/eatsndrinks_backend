#!/usr/bin/env python
"""
Script ƒë·ªÉ test OpenAI API key
"""

import os
import sys
import requests
import json
from decouple import config

def test_openai_api_key():
    """Test OpenAI API key"""
    print("üîë Testing OpenAI API Key")
    print("=" * 50)
    
    # L·∫•y API key t·ª´ environment
    api_key = config('OPENAI_API_KEY', default='')
    
    if not api_key:
        print("‚ùå Kh√¥ng t√¨m th·∫•y OPENAI_API_KEY trong file .env")
        print("\nH∆∞·ªõng d·∫´n:")
        print("1. T·∫°o file .env trong th∆∞ m·ª•c eatsndrinks/")
        print("2. Th√™m d√≤ng: OPENAI_API_KEY=your-api-key-here")
        print("3. Ch·∫°y l·∫°i script n√†y")
        return False
    
    print(f"‚úÖ T√¨m th·∫•y API key: {api_key[:10]}...{api_key[-4:]}")
    
    # Test API call
    print("\nüß™ Testing API call...")
    
    headers = {
        'Authorization': f'Bearer {api_key}',
        'Content-Type': 'application/json'
    }
    
    data = {
        'model': 'gpt-3.5-turbo',
        'messages': [
            {'role': 'user', 'content': 'Xin ch√†o! H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát.'}
        ],
        'max_tokens': 50,
        'temperature': 0.7
    }
    
    try:
        response = requests.post(
            'https://api.openai.com/v1/chat/completions',
            headers=headers,
            json=data,
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            message = result['choices'][0]['message']['content']
            usage = result['usage']
            
            print("‚úÖ API call th√†nh c√¥ng!")
            print(f"Response: {message}")
            print(f"Tokens used: {usage['total_tokens']}")
            print(f"Cost: ~${usage['total_tokens'] * 0.000002:.6f}")
            return True
            
        elif response.status_code == 401:
            print("‚ùå API key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n")
            print("H√£y ki·ªÉm tra l·∫°i API key c·ªßa b·∫°n")
            return False
            
        elif response.status_code == 429:
            print("‚ùå Rate limit exceeded")
            print("B·∫°n ƒë√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n API calls")
            return False
            
        else:
            print(f"‚ùå L·ªói API: {response.status_code}")
            print(f"Response: {response.text}")
            return False
            
    except requests.exceptions.Timeout:
        print("‚ùå Timeout - K·∫øt n·ªëi qu√° ch·∫≠m")
        return False
        
    except requests.exceptions.ConnectionError:
        print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn OpenAI API")
        print("Ki·ªÉm tra k·∫øt n·ªëi internet c·ªßa b·∫°n")
        return False
        
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}")
        return False

def test_chatbot_with_openai():
    """Test chatbot v·ªõi OpenAI"""
    print("\nü§ñ Testing Chatbot with OpenAI")
    print("=" * 50)
    
    try:
        # Import Django
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'eatsndrinks.settings')
        import django
        django.setup()
        
        from chatbot.services import ChatbotService
        
        service = ChatbotService()
        
        # Test v·ªõi OpenAI
        test_messages = [
            "Xin ch√†o",
            "T√¥i mu·ªën t√¨m ƒë·ªì u·ªëng",
            "ƒê·ªÅ xu·∫•t cho t√¥i m√≥n ƒÉn ngon"
        ]
        
        for message in test_messages:
            print(f"\nTesting: '{message}'")
            result = service.process_chat(message)
            print(f"Response: {result['message']}")
            print(f"Model used: {result['metadata']['model_used']}")
            print(f"Recommendations: {len(result['recommendations'])} s·∫£n ph·∫©m")
            
            if result['metadata']['model_used'] == 'gpt-3.5-turbo':
                print("‚úÖ S·ª≠ d·ª•ng OpenAI GPT-3.5-turbo")
            else:
                print("‚ö†Ô∏è S·ª≠ d·ª•ng fallback mode")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi test chatbot: {str(e)}")
        return False

def check_api_key_format():
    """Ki·ªÉm tra format c·ªßa API key"""
    print("\nüîç Checking API Key Format")
    print("=" * 50)
    
    api_key = config('OPENAI_API_KEY', default='')
    
    if not api_key:
        print("‚ùå Kh√¥ng c√≥ API key")
        return False
    
    # Ki·ªÉm tra format c∆° b·∫£n
    if not api_key.startswith('sk-'):
        print("‚ùå API key kh√¥ng ƒë√∫ng format (ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng 'sk-')")
        return False
    
    if len(api_key) < 20:
        print("‚ùå API key qu√° ng·∫Øn")
        return False
    
    print("‚úÖ API key c√≥ format h·ª£p l·ªá")
    return True

def show_usage_info():
    """Hi·ªÉn th·ªã th√¥ng tin v·ªÅ usage"""
    print("\nüìä OpenAI API Usage Information")
    print("=" * 50)
    
    print("üí∞ Pricing (GPT-3.5-turbo):")
    print("- Input tokens: $0.0015 per 1K tokens")
    print("- Output tokens: $0.002 per 1K tokens")
    print("- Average cost per chat: ~$0.01-0.05")
    
    print("\nüìà Rate Limits:")
    print("- Free tier: 3 requests per minute")
    print("- Paid tier: 3,500 requests per minute")
    
    print("\nüîó Useful Links:")
    print("- API Documentation: https://platform.openai.com/docs")
    print("- Usage Dashboard: https://platform.openai.com/usage")
    print("- API Keys: https://platform.openai.com/api-keys")

def main():
    """Main function"""
    print("üîë OpenAI API Key Tester")
    print("=" * 60)
    
    # Ki·ªÉm tra format
    format_ok = check_api_key_format()
    
    if format_ok:
        # Test API
        api_ok = test_openai_api_key()
        
        if api_ok:
            # Test chatbot
            chatbot_ok = test_chatbot_with_openai()
            
            if chatbot_ok:
                print("\nüéâ T·∫•t c·∫£ tests ƒë·ªÅu th√†nh c√¥ng!")
                print("Chatbot s·∫Ω s·ª≠ d·ª•ng OpenAI GPT-3.5-turbo")
            else:
                print("\n‚ö†Ô∏è API key ho·∫°t ƒë·ªông nh∆∞ng chatbot c√≥ v·∫•n ƒë·ªÅ")
        else:
            print("\n‚ùå API key kh√¥ng ho·∫°t ƒë·ªông")
            print("Chatbot s·∫Ω s·ª≠ d·ª•ng fallback mode")
    else:
        print("\n‚ùå API key kh√¥ng ƒë√∫ng format")
    
    # Hi·ªÉn th·ªã th√¥ng tin usage
    show_usage_info()
    
    print("\n" + "=" * 60)
    print("‚úÖ Testing completed!")

if __name__ == "__main__":
    main() 
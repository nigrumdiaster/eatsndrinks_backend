#!/usr/bin/env python
"""
Test script ƒë·ªÉ ki·ªÉm tra c√°c intent kh√°c nhau c·ªßa chatbot
"""

import os
import django

# Setup Django environment
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'eatsndrinks.settings')
django.setup()

from chatbot.services import ChatbotService

def test_different_intents():
    """Test c√°c intent kh√°c nhau"""
    print("üß™ Testing Chatbot Intents")
    print("=" * 50)
    
    service = ChatbotService()
    
    # Test cases
    test_cases = [
        {
            'message': 'Xin ch√†o',
            'expected_intent': 'greeting',
            'description': 'Ch√†o h·ªèi c∆° b·∫£n'
        },
        {
            'message': 'Hello',
            'expected_intent': 'greeting',
            'description': 'Ch√†o h·ªèi ti·∫øng Anh'
        },
        {
            'message': 'T√¥i mu·ªën t√¨m ƒë·ªì u·ªëng',
            'expected_intent': 'search',
            'description': 'T√¨m ki·∫øm s·∫£n ph·∫©m'
        },
        {
            'message': 'ƒê·ªÅ xu·∫•t cho t√¥i m√≥n ƒÉn ngon',
            'expected_intent': 'recommendation',
            'description': 'Y√™u c·∫ßu ƒë·ªÅ xu·∫•t'
        },
        {
            'message': 'C√≥ g√¨ r·∫ª kh√¥ng?',
            'expected_intent': 'price_search',
            'description': 'T√¨m s·∫£n ph·∫©m r·∫ª'
        },
        {
            'message': 'Trang web n√†y b√°n g√¨?',
            'expected_intent': 'general_question',
            'description': 'H·ªèi chung v·ªÅ trang web'
        },
        {
            'message': 'T√¥i mu·ªën mua ƒë·ªì u·ªëng c√≥ ga',
            'expected_intent': 'search',
            'description': 'T√¨m ki·∫øm c·ª• th·ªÉ'
        },
        {
            'message': 'C√≥ s·∫£n ph·∫©m n√†o cao c·∫•p kh√¥ng?',
            'expected_intent': 'price_search',
            'description': 'T√¨m s·∫£n ph·∫©m cao c·∫•p'
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{i}. {test_case['description']}")
        print(f"   Message: '{test_case['message']}'")
        
        # Analyze intent
        intent = service.analyze_user_intent(test_case['message'])
        print(f"   Detected Intent: {intent['intent']}")
        print(f"   Expected Intent: {test_case['expected_intent']}")
        
        # Test response
        result = service.process_chat(test_case['message'])
        print(f"   Response: {result['message']}")
        print(f"   Recommendations: {len(result['recommendations'])} s·∫£n ph·∫©m")
        
        # Check if intent matches
        if intent['intent'] == test_case['expected_intent']:
            print("Intent detected correctly")
        else:
            print("Intent detection failed")
        
        print("-" * 40)

def test_greeting_no_recommendations():
    """Test r·∫±ng ch√†o h·ªèi kh√¥ng recommend s·∫£n ph·∫©m"""
    print("\nüéØ Testing Greeting - No Recommendations")
    print("=" * 50)
    
    service = ChatbotService()
    
    greeting_messages = [
        'Xin ch√†o',
        'Hello',
        'Hi',
        'Ch√†o b·∫°n',
        'Xin ch√†o b·∫°n'
    ]
    
    for message in greeting_messages:
        print(f"\nTesting: '{message}'")
        result = service.process_chat(message)
        print(f"Response: {result['message']}")
        print(f"Recommendations: {len(result['recommendations'])} s·∫£n ph·∫©m")
        
        if len(result['recommendations']) == 0:
            print("No recommendations (correct)")
        else:
            print("Has recommendations (incorrect)")

def test_search_with_recommendations():
    """Test r·∫±ng t√¨m ki·∫øm c√≥ recommend s·∫£n ph·∫©m"""
    print("\nüîç Testing Search - With Recommendations")
    print("=" * 50)
    
    service = ChatbotService()
    
    search_messages = [
        'T√¥i mu·ªën t√¨m ƒë·ªì u·ªëng',
        'ƒê·ªÅ xu·∫•t cho t√¥i m√≥n ƒÉn',
        'C√≥ s·∫£n ph·∫©m n√†o r·∫ª kh√¥ng?',
        'T√¥i mu·ªën mua th·ª©c ƒÉn nhanh'
    ]
    
    for message in search_messages:
        print(f"\nTesting: '{message}'")
        result = service.process_chat(message)
        print(f"Response: {result['message']}")
        print(f"Recommendations: {len(result['recommendations'])} s·∫£n ph·∫©m")
        
        if len(result['recommendations']) > 0:
            print("Has recommendations (correct)")
            for rec in result['recommendations'][:2]:  # Show first 2
                print(f"   - {rec['name']}: {rec['price']}ƒë")
        else:
            print("No recommendations (incorrect)")

def main():
    """Main function"""
    print("ü§ñ Chatbot Intent Testing")
    print("=" * 60)
    
    # Test different intents
    test_different_intents()
    
    # Test greeting behavior
    test_greeting_no_recommendations()
    
    # Test search behavior
    test_search_with_recommendations()
    
    print("\n" + "=" * 60)
    print("Testing completed!")
    print("\nK·∫øt qu·∫£ mong ƒë·ª£i:")
    print("- Ch√†o h·ªèi: Kh√¥ng recommend s·∫£n ph·∫©m")
    print("- T√¨m ki·∫øm: C√≥ recommend s·∫£n ph·∫©m")
    print("- Intent detection: Ch√≠nh x√°c")

if __name__ == "__main__":
    main() 